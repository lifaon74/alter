import {
  DEEP_MAP_PRIVATE, DeepMap, DeepMapEntries, DeepMapGetPartial, IDeepMap, IDeepMapInternal
} from '../../classes/DeepMap';
import { ISource, Source } from '@lifaon/observables';
import { IsObject } from '../../misc/helpers/is/IsObject';
import { assert, eq } from '../../classes/asserts';

/**
 * INFO: 'get' properties (getter like array.length) cant be observed except by using Expression, because they may change at any time
 * INFO: 'set' properties (setter like array.length) may create side effects like updating other values, we should run a full object check/update after it
 * INFO: others properties may be observed when their value will change trough 'set' (assign)
 */

function ObjectPathGet<T>(obj: object, path: PropertyKey[]): T {
  for (let i = 0, l = path.length; i < l; i++) {
    obj = (obj as any)[path[i]];
  }
  return obj as any;
}

function ObjectPathSet<T>(obj: object, path: PropertyKey[], value: T): void {
  const last: number = path.length - 1;
  for (let i = 0; i < last; i++) {
    obj = (obj as any)[path[i]];
  }
  (obj as any)[last] = value;
}

function ObjectPathDelete(obj: object, path: PropertyKey[]): boolean {
  const last: number = path.length - 1;
  for (let i = 0; i < last; i++) {
    obj = (obj as any)[path[i]];
  }
  return delete ((obj as any)[last]);
}

function ObjectPathExists(obj: object, path: PropertyKey[]): boolean {
  for (let i = 0, l = path.length; i < l; i++) {
    if (path[i] in obj) {
      obj = (obj as any)[path[i]];
    } else {
      return false;
    }
  }
  return true;
}

/*-------------------*/

export interface IRevocableObservedProxy<T> {
  proxy: T;
  revoke: () => T;
}

const OBJECT_OBSERVERS: WeakMap<object, object> = new WeakMap<object, object>();

function IsArrayIndex(propertyName: PropertyKey): number {
  if (typeof propertyName === 'symbol') {
    return -1
  } else if (typeof propertyName === 'string') {
    propertyName = Number(propertyName);
  }

  return (Number.isInteger(propertyName) && (propertyName >= 0)) ? propertyName : -1;
}

/**
 * Creates a proxy which intercepts deeply when a property changes
 * WARN: getter are not taken in account !
 */
function CreateUniqObjectObserver<T extends object>(
  source: T,
  onSet: (path: PropertyKey[], value: any) => void,
  onDelete: (path: PropertyKey[]) => void,
  path: PropertyKey[] = []
): IRevocableObservedProxy<T> {
  let proxy: T | undefined = OBJECT_OBSERVERS.get(source) as (T | undefined);
  if (proxy === void 0) {
    proxy = new Proxy(source, {
      get: (target: any, propertyName: PropertyKey, receiver: any): any => {
        return Reflect.get(target, propertyName, receiver);
      },
      set: (target: any, propertyName: PropertyKey, value: any, receiver: any) => {
        const _path: PropertyKey[] = path.concat(propertyName);

        // TODO if old value is an object, we should revoke the object observer
        // @example:
        // const a = { a: { b: 'b' } };
        // const b = a.a;
        // a.a = 'new value';
        // b.b = 'new b'; // problem because we are still observing 'b'

        if (IsObject(value)) {
          value = CreateUniqObjectObserver(value, onSet, onDelete, _path);
        }

        onSet(_path, value);

        return Reflect.set(target, propertyName, value, receiver);
      },
      deleteProperty: (target: any, propertyName: PropertyKey): boolean => {
        onDelete(path.concat(propertyName));

        return Reflect.deleteProperty(target, propertyName);
      },
    });
    OBJECT_OBSERVERS.set(source, proxy as T);

    for (const key in source) {
      Reflect.set(proxy as T, key, Reflect.get(source, key));
    }
  }

  return {
    proxy: proxy as T,
    revoke: () => {
      return source;
    },
  };
}


class DataProxy<T extends object> {
  private _data: T;
  private _observables: IDeepMap<ISource<any>>;
  private _autoUpdateTimer: any | null;

  constructor(source: T = Object.create(null)) {
    this._observables = new DeepMap<ISource<any>>();
    this._autoUpdateTimer = null;
    this.data = source;
  }

  get data(): T {
    return this._data;
  }

  set data(value: T) {
    this._data = CreateUniqObjectObserver<T>(value, (path: any[], value: any) => {
      console.warn('set', path, value);
      // this._emit(path, value);
    }, (path: any[]) => {
      console.warn('delete', path);
      // this._emit(path, void 0);
    });

    // this._emit([], this._data);
  }

  // get template(): any {
  //   return new Proxy(Object.create(null), {
  //     get: (target: any, propertyName: PropertyKey) => {
  //       return Reflect.get(target);
  //     },
  //     set: (target: any, propertyName: PropertyKey, value: any) => {
  //       ObjectPathSet<any>((proxy as ISourceProxyInternal)[SOURCE_PROXY_PRIVATE].dataProxy, path.concat(propertyName), value);
  //       return true;
  //     },
  //     deleteProperty: (target: any, propertyName: PropertyKey): boolean => {
  //       return ObjectPathDelete((proxy as ISourceProxyInternal)[SOURCE_PROXY_PRIVATE].dataProxy, path.concat(propertyName));
  //     },
  //     ownKeys: () => {
  //       return Object.keys(ObjectPathGet((proxy as ISourceProxyInternal)[SOURCE_PROXY_PRIVATE].dataProxy, path));
  //     }, // https://stackoverflow.com/questions/40352613/why-does-object-keys-and-object-getownpropertynames-produce-different-output
  //     getOwnPropertyDescriptor: () => {
  //       return {
  //         enumerable: true,
  //         configurable: true,
  //       };
  //     }
  //   });
  // }

  observe<V>(path: PropertyKey[]): ISource<V> {
    // TODO check if property is a getter, if yes, creates an Expression
    path = this._normalizePath(path);
    let source: ISource<V> | undefined = this._observables.get(path) as (ISource<V> | undefined);
    if (source === void 0) {
      source = new Source<V>().emit(this.get(path));
      this._observables.set(path, source);
    }
    return source;
  }

  unobserve(path: PropertyKey[]): boolean {
    return this._observables.delete(this._normalizePath(path));
  }

  get<V>(path: PropertyKey[]): V {
    return ObjectPathGet(this._data, path);
  }

  set(path: PropertyKey[], value: any): void {
    ObjectPathSet(this._data, path, value);
  }

  update(): void {
    const iterator: Iterator<[any[], ISource<any>]> = this._observables.entries();
    let result: IteratorResult<[any[], ISource<any>]>;
    while (!(result = iterator.next()).done) {
      const [path, source] = result.value;
      if (ObjectPathExists(this._data, path)) {
        source.emit(ObjectPathGet(this._data, path));
      } else {
        source.emit(void 0);
      }
    }
  }

  startAutoUpdate(): void {
    if (this._autoUpdateTimer === null) {
      const loop = () => {
        this.update();
        this._autoUpdateTimer = setTimeout(loop, 1000);
      };

      loop();
    }
  }

  stopAutoUpdate(): void {
    if (this._autoUpdateTimer !== null) {
      clearTimeout(this._autoUpdateTimer);
      this._autoUpdateTimer = null;
    }
  }

  private _normalizePath(path: PropertyKey[]): PropertyKey[] {
    return path.map((key: PropertyKey) => {
      return (typeof key === 'number') ? String(key) : key;
    });
  }

  private _emit(path: any[], value: any): void {
    const map: Map<any, any> = ((this._observables as unknown) as IDeepMapInternal<ISource<any>>)[DEEP_MAP_PRIVATE].map;
    let entry: Map<any, any> | ISource<any> | undefined = DeepMapGetPartial(map, path);
    if (entry === void 0) {
      // do nothing
    } else if (entry instanceof Map) {
      // console.warn(entry, path);
      const iterator: IterableIterator<[any[], ISource<any>]> = DeepMapEntries(entry);
      let result: IteratorResult<[any[], ISource<any>]>;
      while (!(result = iterator.next()).done) {
        // console.warn(result.value[0]);
        result.value[1].emit(
          (IsObject(value) && ObjectPathExists(value, result.value[0]))
            ? ObjectPathGet(value, result.value[0])
            : ((result.value[0].length === 0) ? value : void 0)
        );
      }
    } else {
      entry.emit(value);
    }
  }
}


/*----------------------------*/

async function debugObject() {
  const data = new DataProxy<any>({
    c: {
      a: 'c-a-1',
    }
  });

  await assert(() => (typeof data.data.c === 'object'));
  await assert(() => ('c' in data.data));
  await assert(() => eq(Object.keys(data.data), ['c']));

  console.log('-------------------------');


  data.observe(['c'])
    .pipeTo((value: any) => {
      console.log('c changed', value);
    }).activate();

  data.observe(['c', 'a'])
    .pipeTo((value: any) => {
      console.log('c.a changed', value);
    }).activate();

  console.log('-----');
  const c = data.data.c;
  data.data.c = 'abc';
  c.a = 'a';

//   data.data.c.a = 'c-a-2'; // c.a => c-a-2
//   data.data.c = { a: 'c-a-3' }; // c.a => c-a-3, c => { a: 'c-a-3' }
//   data.data.c = 'c'; // c => c, c.a => void 0
//   data.data.c = { a: 'c-a-4' }; // c => { a: 'c-a-4' }, c.a => c-a-4
//   delete (data.data.c.a); // c.a => void 0
//   data.data.c = { a: 'c-a-5' }; // c => { a: 'c-a-5' }, c.a => c-a-5
//   delete (data.data.c); // void 0 => c, c.a => void 0
//   data.data.c = { a: 'c-a-6' }; // c => { a: 'c-a-6' }, c.a => c-a-6
//   data.data = {}; // void 0 => c, c.a => void 0
}

async function debugArray() {
  const data = new DataProxy<any>({
    c: ['c0', 'c1', 'c2']
  });


  await assert(() => (typeof data.data.c === 'object'));
  await assert(() => ('c' in data.data));
  await assert(() => eq(Object.keys(data.data), ['c']));
  await assert(() => Array.isArray(data.data.c));
  await assert(() => ('slice' in data.data.c));

  console.log('-------------------------');

  // data.startAutoUpdate();

  data.observe(['c'])
    .pipeTo((value: any) => {
      console.log('c changed', value);
    }).activate();

  data.observe(['c', 0])
    .pipeTo((value: any) => {
      console.log('c[0] changed', value);
    }).activate();

  data.observe(['c', 'length'])
    .pipeTo((value: any) => {
      console.log('c.length changed', value);
    }).activate();

  console.log('-----');
  data.data.c[0] = 'c0-2'; // c[0] => c0-2
  // console.log('-----');
  // data.data.c[10] = 'c10-0'; // c[0] => c0-2
  // console.log('c.length', data.data.c.length);
  // console.log('-----');
  // data.data.c = ['c0-3', 'c1-3']; // c[0] => c0-3, c => ['c0-3', 'c1-3']
  // console.log('-----');
  // data.data.c = 'c'; // c => c, c[0] => void 0
  // console.log('-----');
  // data.data.c = ['c0-4', 'c1-4']; // c[0] => c0-4, c => ['c0-4', 'c1-4']
  // console.log('-----');
  // data.data.c.shift(); // c[0] => c1-4
  // console.log('-----');
  // data.data.c.unshift('c-unshift'); // c[0] => c-unshift
  // console.log('-----');
  // data.data.c.length = 0; // WARN problem
  // console.log('-----');
  // data.data.c = []; // c[0] => void 0
  // console.log('-----');
  // data.data.c.push('c-push'); // c[0] => c-push
  // console.log('-----');
  // data.data.c = [2, 1]; // c[0] => 2, c => [2, 1]
  // console.log('-----');
  // data.data.c.sort(); // c[0] => 1
}


export async function debugDataProxy() {
  await debugObject();
  // await debugArray();
}
