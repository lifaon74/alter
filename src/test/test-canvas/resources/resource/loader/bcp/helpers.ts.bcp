import { CancellablePromise, ICancellablePromise, ICancelToken } from '@lifaon/observables';

export function ExtensionToMimeType(extension: string, defaultExtension: string | null = 'application/octet-stream'): string | null {
  // https://github.com/jshttp/mime-db
  // https://github.com/jshttp/mime-db/blob/master/db.json
  switch (extension) {
    case 'mp3':
      return 'audio/mpeg';
    case 'ogg':
      return 'audio/ogg';
    case 'wav':
      return 'audio/wav';
    // case 'webm':
    //   return 'audio/weba';

    case 'mp4':
      return 'video/mp4';
    case 'mpeg':
    case 'mpg':
      return 'video/mpeg';
    case 'ogv':
      return 'video/ogg';
    case 'webm':
      return 'video/webm';
    case 'flv':
      return 'video/x-flv';
    case 'x-msvideo':
      return 'video/avi';

    case 'png':
      return 'image/png';
    case 'apng':
      return 'image/apng';
    case 'bmp':
      return 'image/bmp';
    case 'gif':
      return 'image/gif';
    case 'jpeg':
    case 'jpg':
      return 'image/jpeg';
    case 'svg':
      return 'image/svg+xml';
    case 'tiff':
    case 'tif':
      return 'image/tiff';
    case 'webp':
      return 'image/webp';
    case 'ico':
      return 'image/x-ico';

    default:
      return defaultExtension;
  }
}

export function LoadHeaders(url: string, token?: ICancelToken): ICancellablePromise<Headers> {
  return CancellablePromise.fetch(url, {
    method: 'HEAD',
  }, token)
    .then((response: Response) => response.headers);
}

// export type TProgressCallback = (done: number, total: number) => void;
// export const DEFAULT_PROGRESS_CALLBACK: TProgressCallback = () => {};
//
//
// export function LoadFile(url: string, progress: TProgressCallback = DEFAULT_PROGRESS_CALLBACK, token?: ICancelToken): ICancellablePromise<Blob> {
//   return new CancellablePromise((resolve: any, reject: any) => {
//     const request: XMLHttpRequest = new XMLHttpRequest();
//     request.open('GET', url, true);
//     request.responseType = 'blob';
//
//     request.addEventListener('progress', (event: ProgressEvent) => {
//       if (event.lengthComputable) {
//         progress(event.loaded, event.total);
//       }
//     });
//
//     request.addEventListener('load', () => {
//       resolve(request.response);
//     });
//
//     request.addEventListener('error', () => {
//       reject(new Error(`fetch ${url} failed: ${request.status} ${request.statusText}`));
//     });
//
//     if (token !== void 0) {
//       token.untilCancelled()
//         .then(() => request.abort());
//     }
//
//     request.send(null);
//   });
// }


export interface ResourceDetails {
  url: string,
  size: number;
  type: string;
}

export const DEFAULT_RESOURCE_DETAILS: ResourceDetails = {
  url: '',
  size: 0,
  type: 'application/octet-stream',
};

export function CompareResourceSizes(a: number, b: number): number {
  return a - b;
  // return (a === 0)
  //   ? ((b === 0) ? 0 : 1)
  //   : ((b === 0) ? -1 : (a - b));
}

export function CompareResourceDetails(a: ResourceDetails, b: ResourceDetails): number {
  return CompareResourceSizes(a.size, b.size);
}

